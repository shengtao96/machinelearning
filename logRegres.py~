from numpy import *

def loadDataSet(filename):
	fr = open(filename)
	numFeat = len(fr.readline().strip().split('\t')) - 1
	dataSet = []; labelSet = []
	for line in fr.readlines():
		lineArr = []
		curLine = line.strip().split('\t')
		lineArr.append(1.0)
		for i in range(numFeat):
			lineArr.append(float(curLine[i]))
		dataSet.append(lineArr)
		labelSet.append(float(curLine[-1]))
	return dataSet, labelSet

def sigmoid(inX):
	return longfloat(1.0 / (1 + exp(-inX)))

def gradAscent(dataMat, labelMat, alpha, max_iter = 10000):
	m, n = shape(dataMat)
	theta = mat(zeros((n,1)))
	for i in range(max_iter):
		error = sigmoid(dataMat * theta) - labelMat
		theta = theta - dataMat.T * error * alpha
	return theta

def plotBestFit(weights, dataMat, labelMat):
	import matplotlib.pyplot as plt
	dataArr = array(dataMat)
	n = shape(dataArr)[0]
	xcord1 = []; ycord1 = []
	xcord2 = []; ycord2 = []
	for i in range(n):
		if int(labelMat[i]) == 1:
			xcord1.append(dataArr[i, 1]); ycord1.append(dataArr[i, 2])
		else:
			xcord2.append(dataArr[i, 1]); ycord2.append(dataArr[i, 2])
	fig = plt.figure()
	ax = fig.add_subplot(111)
	ax.scatter(xcord1, ycord1, s = 30, c = 'red', marker = 's')
	ax.scatter(xcord2, ycord2, s = 30, c = 'green')
	x = arange(-3.0, 3.0, 0.1)
	y = (-weights[0] - weights[1] * x) / weights[2]
	ax.plot(x, y)
	plt.xlabel('X1'); plt.ylabel('X2');
	plt.show()

def stocGradAscent0(dataMat, labelMat, alpha):
	m, n = shape(dataMat)
	theta = mat(ones((n, 1)))
	for i in range(m):
		error = sigmoid(dataMat[i, :] * theta) - labelMat[i, 0]
		theta = theta - alpha * dataMat[i, :].T * error
	return theta

def stocGradAscent1(dataMat, labelMat, max_iter = 150):
	m, n = shape(dataMat)
	theta = mat(ones((n, 1)))
	for j in range(max_iter):
		dataIndex = range(m)
		for i in range(m):
			alpha = 4 / (1.0 + i + j) + 0.01
			randIndex = int(random.uniform(0, len(dataIndex)))
			iterIndex = dataIndex[randIndex]
			error = sigmoid(dataMat[iterIndex, :] * theta) - labelMat[iterIndex, 0]
			theta = theta - alpha * dataMat[iterIndex, :].T * error
			del(dataIndex[randIndex])
	return theta

def colicTest(filenameTrain, filenameTest):
	frTrain = open(filenameTrain)
	frTest = open(filenameTest)
	numFeat = len(frTrain.readline().strip().split('\t')) - 1
	trainingSet = []; trainingLabel = []
	for line in frTrain.readlines():
		lineArr = []
		curLine = line.strip().split('\t')
		lineArr.append(1.0)
		for i in range(numFeat):
			lineArr.append(float(curLine[i]))
		trainingSet.append(lineArr)
		trainingLabel.append(float(curLine[-1]))
	trainingMat = mat(trainingSet)
	trainingLabelMat = mat(trainingLabel).T
	trainingTheta = stocGradAscent1(trainingMat, trainingLabelMat, 500)
	errorCount = 0
	numTestVec = 0.0
	for line in frTest.readlines():
		numTestVec += 1.0
		lineArr = []
		curLine = line.strip().split('\t')
		lineArr.append(1.0)
		for i in range(numFeat):
			lineArr.append(float(curLine[i]))
		lineMat = mat(lineArr)
		print "%f, %d" % (sigmoid(lineMat * trainingTheta), int(curLine[-1]))
		if round(sigmoid(lineMat * trainingTheta)) != float(curLine[-1]):
			errorCount += 1
	errorRate = float(errorCount) / numTestVec
	print "the error rate of this test is: %f" % errorRate
	return errorRate

def multiTest(filenameTrain, filenameTest):
	numTests = 10; errorSum = 0.0
	for k in range(numTests):
		errorSum += colicTest(filenameTrain, filenameTest)
	print "after %d iterations the average error rate is : %f" % (numTests, errorSum / float(numTests))



dataSet, labelSet = loadDataSet('D:\\code\\testSet.txt')
dataMat = mat(dataSet)
labelMat = mat(labelSet).T
alpha = 0.01
#theta = gradAscent(dataMat, labelMat, alpha)
#print theta
#plotBestFit(theta.getA(), dataSet, labelSet)
#theta0 = stocGradAscent0(dataMat, labelMat, 0.01)
#print theta0
#plotBestFit(theta0.getA(), dataSet, labelSet)
#heta1 = stocGradAscent1(dataMat, labelMat)
#print theta1
#plotBestFit(theta1.getA(), dataSet, labelSet)
colicTest('D:\\code\\horseColicTraining.txt', 'D:\\code\\horseColicTest.txt')
#multiTest('D:\\code\\horseColicTraining.txt', 'D:\\code\\horseColicTest.txt')
